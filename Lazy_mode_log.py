import os
import subprocess
import datetime

def pairby(target_path, search_for1, search_for2):
    target_folder = os.listdir(os.path.expanduser(target_path))
    file_pairs = {}

    print(f"Files in {target_path}: {target_folder}")  # Debugging output

    for file in target_folder:
        if search_for1 in file:
            if file.count(search_for1) > 1:
                raise NameError(f'There is more than one occurrence of {search_for1} in your sample name. Please remove it so the pair read can be detected.')
            else:
                pair_name = file.replace(search_for1, search_for2)
                if pair_name in target_folder:
                    file_pairs[file] = pair_name
    print(f"File pairs found: {file_pairs}")  # Debugging output
    return file_pairs

def log_command(command, log_file_path):
    command_str = ' '.join(command) if isinstance(command, list) else command

    with open(log_file_path, "a") as log_file:
        log_file.write(f"{datetime.datetime.now()}: {command_str}\n\n")
    print(f"Command logged: {command_str}")  # Debugging output

def run_analysis(folder_path):
    log_file_path = os.path.join(folder_path, "log.txt")

    # Define the path to the reference genomes
    invader_fasta = os.path.expanduser("/home/Mouse_4/Reference_genomes/NC_000913.2.fasta")
    invader_genbank = os.path.expanduser("/home/Mouse_4/Reference_genomes/NC_000913.2.gbk")
    resident_fasta = os.path.expanduser("/home/Mouse_4/Reference_genomes/CP054662.1_IS_annotated.fasta")
    resident_genbank = os.path.expanduser("/home/Mouse_4/Reference_genomes/CP054662.1_IS_annotated.gbk")

    # Identify read pairs using pairby function
    read_pairs = pairby(folder_path, "_R1", "_R2")
    
    # Execute commands for each file pair
    for pair1, pair2 in read_pairs.items():
        sample_name = pair1.split('.')[0]
        if '_I_' in pair1:
            reference_genome1 = invader_fasta
            reference_genome2 = invader_genbank
        elif '_R_' in pair1:
            reference_genome1 = resident_fasta
            reference_genome2 = resident_genbank
        try:
            # Run fastp
            fastp_command = [
                "fastp",
                "-q", "20",
                "-u", "50",
                "--length_required", "100",
                "--dedup", "1",
                "--detect_adapter_for_pe",
                "-p", "3",
                "-5", "-M", "20",
                "-W", "4",
                "-c",
                "-i", os.path.join(folder_path, pair1),
                "-I", os.path.join(folder_path, pair2),
                "-o", os.path.join(folder_path, f"TRIM_{pair1}"),
                "-O", os.path.join(folder_path, f"TRIM_{pair2}"),
                "--html", "/dev/null",
                "--json", "/dev/null"
            ]
            log_command(fastp_command, log_file_path)
            subprocess.run(fastp_command, check=True)
            
            # Run bbsplit.sh
            bbsplit_command = [
                "bbsplit.sh",
                f"in1={os.path.join(folder_path, f'TRIM_{pair1}')}",
                f"in2={os.path.join(folder_path, f'TRIM_{pair2}')}",
                "ambig2=best",
                f"basename={sample_name}_%.fastq",
                f'ref={reference_genome1}'
            ]
            log_command(bbsplit_command, log_file_path)
            subprocess.run(bbsplit_command, check=True)
            
            # Determine the output file generated by bbsplit.sh
            output_file = f"{sample_name}_{reference_genome1.split('/')[-1].split('.')[0] + '.' + reference_genome1.split('/')[-1].split('.')[1]}.fastq"

            # Run reformat.sh
            reformat_command = [
                "reformat.sh",
                f"in={os.path.join(folder_path, output_file)}",
                f"out1={os.path.join(folder_path, f'CLEAN_TRIM_{pair1}')}",
                f"out2={os.path.join(folder_path, f'CLEAN_TRIM_{pair2}')}"
            ]
            log_command(reformat_command, log_file_path)
            subprocess.run(reformat_command, check=True)

            # Run breseq
            breseq_command = [
                "breseq",
                "-p", "-j", "16", "-b", "30", "-m", "20",
                "-o", sample_name,
                "-r", reference_genome2,
                os.path.join(folder_path, f"CLEAN_TRIM_{pair1}"),
                os.path.join(folder_path, f"CLEAN_TRIM_{pair2}"),
                "--polymorphism-frequency-cutoff", "0",
                "--polymorphism-minimum-variant-coverage", "5"
            ]
            log_command(breseq_command, log_file_path)
            subprocess.run(breseq_command, check=True)

        except subprocess.CalledProcessError as e:
            print(f"Error running command: {e}")
            log_command(e.cmd, log_file_path)

if __name__ == "__main__":
    folder_path = input("Please provide the path to the folder containing your files: ").strip()
    if os.path.exists(folder_path) and os.path.isdir(folder_path):
        run_analysis(folder_path)
    else:
        print(f"Provided path does not exist or is not a directory: {folder_path}")
